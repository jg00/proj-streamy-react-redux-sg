{"ast":null,"code":"var _jsxFileName = \"/Users/jack/Code-NoSync/sg-react-01/prac-01/23-forms-with-redux-form/streams/client/src/components/streams/StreamCreate.js\";\nimport React from \"react\";\nimport { Field, reduxForm } from \"redux-form\";\n\nclass StreamCreate extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.renderInput = ({\n      input,\n      label,\n      meta\n    }) => {\n      console.log(meta); // Will contain validation errors\n\n      const className = `field ${meta.error && meta.touched ? \"error\" : \"\"}`;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: className,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 9\n        }\n      }, label), /*#__PURE__*/React.createElement(\"input\", Object.assign({}, input, {\n        autoComplete: \"off\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 9\n        }\n      })), this.renderError(meta));\n    };\n  }\n\n  // 4 Handle errors with redux-form. Destructure meta.error, meta.touched\n  renderError({\n    error,\n    touched\n  }) {\n    if (touched && error) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"ui error message\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 9,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"header\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 10,\n          columnNumber: 11\n        }\n      }, error));\n    }\n  } // 1 Input with redux-form.  Form props destructured.\n\n\n  // 2 Submit form with redux-form\n  onSubmit(formValues) {\n    // event.preventDefault(); // No longer needed.  redux-form automatically applies this behavior\n    // Usually onSubmit(event) argument is what is passed.  Now with redux-form we get the <Field> input values as arguments\n    console.log(formValues);\n  }\n\n  render() {\n    // console.log(this.props);\n    return /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.props.handleSubmit(this.onSubmit) // Remember this.props.handleSubmit is provided by redux-form\n      ,\n      className: \"ui form error\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Field, {\n      name: \"title\",\n      component: this.renderInput,\n      label: \"Enter Title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Field, {\n      name: \"description\",\n      component: this.renderInput,\n      label: \"Enter Description\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"ui button primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }\n    }, \"Submit\"));\n  }\n\n} // 3 Validation with redux-form. Empty errors object indicate no errors. This function is wired to redux-form at export default.\n\n\nconst validate = formValues => {\n  const errors = {};\n\n  if (!formValues.title) {\n    errors.title = \"You must enter a title\";\n  }\n\n  if (!formValues.description) {\n    errors.description = \"You must enter a description\";\n  }\n\n  return errors;\n};\n\nexport default reduxForm({\n  form: \"streamCreate\",\n  // a unique identifier for this form\n  validate: validate\n})(StreamCreate);\n/*\n  // 1 Wire up <input> onChange and value vs shortform of spreading properties {...formProps}\n  // Spreading properties is a JSX shortcut that takes all key/value pairs and add as properties to input element\n  renderInput(formProps) {\n    // console.log(formProps); // {input: {..}, meta: {..}}\n    return (\n      <input\n        onChange={formProps.input.onChange}\n        value={formProps.input.value}\n      />\n    );\n  }\n\n  // 2 Spread operator - These two are equivalent\n  function App1() {\n    return <Greeting firstName=\"Ben\" lastName=\"Hector\" />;\n  }\n\n  function App2() {\n    const props = {firstName: 'Ben', lastName: 'Hector'};\n    return <Greeting {...props} />;\n  }\n\n\n  // 3 Destructuring formProps.input further becomes renderInput({input})\n  // renderInput(formProps) {\n  //   return <input {...formProps.input} />;\n  // }\n\n\n*/","map":{"version":3,"sources":["/Users/jack/Code-NoSync/sg-react-01/prac-01/23-forms-with-redux-form/streams/client/src/components/streams/StreamCreate.js"],"names":["React","Field","reduxForm","StreamCreate","Component","renderInput","input","label","meta","console","log","className","error","touched","renderError","onSubmit","formValues","render","props","handleSubmit","validate","errors","title","description","form"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,SAAhB,QAAiC,YAAjC;;AAEA,MAAMC,YAAN,SAA2BH,KAAK,CAACI,SAAjC,CAA2C;AAAA;AAAA;;AAAA,SAazCC,WAbyC,GAa3B,CAAC;AAAEC,MAAAA,KAAF;AAASC,MAAAA,KAAT;AAAgBC,MAAAA;AAAhB,KAAD,KAA4B;AACxCC,MAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ,EADwC,CACrB;;AAEnB,YAAMG,SAAS,GAAI,SAAQH,IAAI,CAACI,KAAL,IAAcJ,IAAI,CAACK,OAAnB,GAA6B,OAA7B,GAAuC,EAAG,EAArE;AAEA,0BACE;AAAK,QAAA,SAAS,EAAEF,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAQJ,KAAR,CADF,eAEE,+CAAWD,KAAX;AAAkB,QAAA,YAAY,EAAC,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAFF,EAKG,KAAKQ,WAAL,CAAiBN,IAAjB,CALH,CADF;AASD,KA3BwC;AAAA;;AACzC;AACAM,EAAAA,WAAW,CAAC;AAAEF,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAD,EAAqB;AAC9B,QAAIA,OAAO,IAAID,KAAf,EAAsB;AACpB,0BACE;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAyBA,KAAzB,CADF,CADF;AAKD;AACF,GAVwC,CAYzC;;;AAiBA;AACAG,EAAAA,QAAQ,CAACC,UAAD,EAAa;AACnB;AACA;AAEAP,IAAAA,OAAO,CAACC,GAAR,CAAYM,UAAZ;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP;AACA,wBACE;AACE,MAAA,QAAQ,EAAE,KAAKC,KAAL,CAAWC,YAAX,CAAwB,KAAKJ,QAA7B,CADZ,CACoD;AADpD;AAEE,MAAA,SAAS,EAAC,eAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAIE,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,OAAZ;AAAoB,MAAA,SAAS,EAAE,KAAKV,WAApC;AAAiD,MAAA,KAAK,EAAC,aAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJF,eAKE,oBAAC,KAAD;AACE,MAAA,IAAI,EAAC,aADP;AAEE,MAAA,SAAS,EAAE,KAAKA,WAFlB;AAGE,MAAA,KAAK,EAAC,mBAHR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALF,eAUE;AAAQ,MAAA,SAAS,EAAC,mBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAVF,CADF;AAcD;;AArDwC,C,CAwD3C;;;AACA,MAAMe,QAAQ,GAAIJ,UAAD,IAAgB;AAC/B,QAAMK,MAAM,GAAG,EAAf;;AAEA,MAAI,CAACL,UAAU,CAACM,KAAhB,EAAuB;AACrBD,IAAAA,MAAM,CAACC,KAAP,GAAe,wBAAf;AACD;;AAED,MAAI,CAACN,UAAU,CAACO,WAAhB,EAA6B;AAC3BF,IAAAA,MAAM,CAACE,WAAP,GAAqB,8BAArB;AACD;;AAED,SAAOF,MAAP;AACD,CAZD;;AAcA,eAAenB,SAAS,CAAC;AACvBsB,EAAAA,IAAI,EAAE,cADiB;AACD;AACtBJ,EAAAA,QAAQ,EAAEA;AAFa,CAAD,CAAT,CAGZjB,YAHY,CAAf;AAKA","sourcesContent":["import React from \"react\";\nimport { Field, reduxForm } from \"redux-form\";\n\nclass StreamCreate extends React.Component {\n  // 4 Handle errors with redux-form. Destructure meta.error, meta.touched\n  renderError({ error, touched }) {\n    if (touched && error) {\n      return (\n        <div className=\"ui error message\">\n          <div className=\"header\">{error}</div>\n        </div>\n      );\n    }\n  }\n\n  // 1 Input with redux-form.  Form props destructured.\n  renderInput = ({ input, label, meta }) => {\n    console.log(meta); // Will contain validation errors\n\n    const className = `field ${meta.error && meta.touched ? \"error\" : \"\"}`;\n\n    return (\n      <div className={className}>\n        <label>{label}</label>\n        <input {...input} autoComplete=\"off\" />\n\n        {/* <div>{meta.error}</div> */}\n        {this.renderError(meta)}\n      </div>\n    );\n  };\n\n  // 2 Submit form with redux-form\n  onSubmit(formValues) {\n    // event.preventDefault(); // No longer needed.  redux-form automatically applies this behavior\n    // Usually onSubmit(event) argument is what is passed.  Now with redux-form we get the <Field> input values as arguments\n\n    console.log(formValues);\n  }\n\n  render() {\n    // console.log(this.props);\n    return (\n      <form\n        onSubmit={this.props.handleSubmit(this.onSubmit)} // Remember this.props.handleSubmit is provided by redux-form\n        className=\"ui form error\"\n      >\n        <Field name=\"title\" component={this.renderInput} label=\"Enter Title\" />\n        <Field\n          name=\"description\"\n          component={this.renderInput}\n          label=\"Enter Description\"\n        />\n        <button className=\"ui button primary\">Submit</button>\n      </form>\n    );\n  }\n}\n\n// 3 Validation with redux-form. Empty errors object indicate no errors. This function is wired to redux-form at export default.\nconst validate = (formValues) => {\n  const errors = {};\n\n  if (!formValues.title) {\n    errors.title = \"You must enter a title\";\n  }\n\n  if (!formValues.description) {\n    errors.description = \"You must enter a description\";\n  }\n\n  return errors;\n};\n\nexport default reduxForm({\n  form: \"streamCreate\", // a unique identifier for this form\n  validate: validate,\n})(StreamCreate);\n\n/*\n  // 1 Wire up <input> onChange and value vs shortform of spreading properties {...formProps}\n  // Spreading properties is a JSX shortcut that takes all key/value pairs and add as properties to input element\n  renderInput(formProps) {\n    // console.log(formProps); // {input: {..}, meta: {..}}\n    return (\n      <input\n        onChange={formProps.input.onChange}\n        value={formProps.input.value}\n      />\n    );\n  }\n\n  // 2 Spread operator - These two are equivalent\n  function App1() {\n    return <Greeting firstName=\"Ben\" lastName=\"Hector\" />;\n  }\n\n  function App2() {\n    const props = {firstName: 'Ben', lastName: 'Hector'};\n    return <Greeting {...props} />;\n  }\n\n\n  // 3 Destructuring formProps.input further becomes renderInput({input})\n  // renderInput(formProps) {\n  //   return <input {...formProps.input} />;\n  // }\n\n\n*/\n"]},"metadata":{},"sourceType":"module"}