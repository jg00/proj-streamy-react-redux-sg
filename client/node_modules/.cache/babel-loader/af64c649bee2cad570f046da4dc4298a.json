{"ast":null,"code":"var _jsxFileName = \"/Users/jack/Code-NoSync/sg-react-01/prac-01/24-rest-based/streams/client/src/components/streams/StreamCreate.js\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { createStream } from \"../../actions\";\nimport StreamForm from \"./StreamForm\";\n\nclass StreamCreate extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.onSubmit = formValues => {\n      this.props.createStream(formValues); // Call createStream action creator\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 9\n      }\n    }, \"Create a Stream\"), /*#__PURE__*/React.createElement(StreamForm, {\n      onSubmit: this.onSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default connect(null, {\n  createStream\n})(StreamCreate);\n/*\n  // 4 Before adding connect()\n  export default reduxForm({\n    form: \"streamCreate\", // a unique identifier for this form\n    validate: validate,\n  })(StreamCreate);\n*/\n\n/*\n  // 1 Wire up <input> onChange and value vs shortform of spreading properties {...formProps}\n  // Spreading properties is a JSX shortcut that takes all key/value pairs and add as properties to input element\n  renderInput(formProps) {\n    // console.log(formProps); // {input: {..}, meta: {..}}\n    return (\n      <input\n        onChange={formProps.input.onChange}\n        value={formProps.input.value}\n      />\n    );\n  }\n\n  // 2 Spread operator - These two are equivalent\n  function App1() {\n    return <Greeting firstName=\"Ben\" lastName=\"Hector\" />;\n  }\n\n  function App2() {\n    const props = {firstName: 'Ben', lastName: 'Hector'};\n    return <Greeting {...props} />;\n  }\n\n\n  // 3 Destructuring formProps.input further becomes renderInput({input})\n  // renderInput(formProps) {\n  //   return <input {...formProps.input} />;\n  // }\n\n\n*/","map":{"version":3,"sources":["/Users/jack/Code-NoSync/sg-react-01/prac-01/24-rest-based/streams/client/src/components/streams/StreamCreate.js"],"names":["React","connect","createStream","StreamForm","StreamCreate","Component","onSubmit","formValues","props","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,YAAT,QAA6B,eAA7B;AACA,OAAOC,UAAP,MAAuB,cAAvB;;AAEA,MAAMC,YAAN,SAA2BJ,KAAK,CAACK,SAAjC,CAA2C;AAAA;AAAA;;AAAA,SACzCC,QADyC,GAC7BC,UAAD,IAAgB;AACzB,WAAKC,KAAL,CAAWN,YAAX,CAAwBK,UAAxB,EADyB,CACY;AACtC,KAHwC;AAAA;;AAKzCE,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADF,eAEE,oBAAC,UAAD;AAAY,MAAA,QAAQ,EAAE,KAAKH,QAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADF;AAMD;;AAZwC;;AAe3C,eAAeL,OAAO,CAAC,IAAD,EAAO;AAAEC,EAAAA;AAAF,CAAP,CAAP,CAAgCE,YAAhC,CAAf;AAEA;;;;;;;;AAQA","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { createStream } from \"../../actions\";\nimport StreamForm from \"./StreamForm\";\n\nclass StreamCreate extends React.Component {\n  onSubmit = (formValues) => {\n    this.props.createStream(formValues); // Call createStream action creator\n  };\n\n  render() {\n    return (\n      <div>\n        <h3>Create a Stream</h3>\n        <StreamForm onSubmit={this.onSubmit} />\n      </div>\n    );\n  }\n}\n\nexport default connect(null, { createStream })(StreamCreate);\n\n/*\n  // 4 Before adding connect()\n  export default reduxForm({\n    form: \"streamCreate\", // a unique identifier for this form\n    validate: validate,\n  })(StreamCreate);\n*/\n\n/*\n  // 1 Wire up <input> onChange and value vs shortform of spreading properties {...formProps}\n  // Spreading properties is a JSX shortcut that takes all key/value pairs and add as properties to input element\n  renderInput(formProps) {\n    // console.log(formProps); // {input: {..}, meta: {..}}\n    return (\n      <input\n        onChange={formProps.input.onChange}\n        value={formProps.input.value}\n      />\n    );\n  }\n\n  // 2 Spread operator - These two are equivalent\n  function App1() {\n    return <Greeting firstName=\"Ben\" lastName=\"Hector\" />;\n  }\n\n  function App2() {\n    const props = {firstName: 'Ben', lastName: 'Hector'};\n    return <Greeting {...props} />;\n  }\n\n\n  // 3 Destructuring formProps.input further becomes renderInput({input})\n  // renderInput(formProps) {\n  //   return <input {...formProps.input} />;\n  // }\n\n\n*/\n"]},"metadata":{},"sourceType":"module"}