{"ast":null,"code":"var _jsxFileName = \"/Users/jack/Code-NoSync/sg-react-01/prac-01/21-authentication/streams/client/src/components/GoogleAuth.js\";\nimport React from \"react\";\n\nclass GoogleAuth extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isSignedIn: null // null because we do not know if the user is signed in or not signed in when our application first loads\n\n    };\n\n    this.onAuthChange = () => {\n      this.setState({\n        isSignedIn: this.auth.isSignedIn.get()\n      });\n    };\n  }\n\n  componentDidMount() {\n    // Load additional modules\n    window.gapi.load(\"client:auth2\", () => {\n      // Initializes the GoogleAuth object. If the user has already signed in, the GoogleAuth object restores the user's sign-in state from the previous session.\n      // When you initialize the GoogleAuth object, you configre the objet with your OAuth 2.0 client ID and any additional options you want to specify.\n      // Also returns gapi.auth2.GoogleAuth object.\n      window.gapi.client.init({\n        clientId: \"1029807907749-a8snu3tfvj6tcd1qfmdcu5cv1patb7mb.apps.googleusercontent.com\",\n        scope: \"email\"\n      }).then(() => {\n        // Get a reference to the GoogleAuth object\n        this.auth = window.gapi.auth2.getAuthInstance();\n        this.setState({\n          isSignedIn: this.auth.isSignedIn.get()\n        }); // Register listener for changes in sign in state\n\n        this.auth.isSignedIn.listen(this.onAuthChange);\n      });\n    });\n  }\n\n  renderAuthButton() {\n    if (this.state.isSignedIn === null) {\n      return null;\n    } else if (this.state.isSignedIn) {\n      return /*#__PURE__*/React.createElement(\"button\", {\n        className: \"ui red google button\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"i\", {\n        className: \"google icon\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 11\n        }\n      }), \"Sign Out\");\n    } else {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 14\n        }\n      }, \"I am not signed in\");\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 12\n      }\n    }, this.renderAuthButton());\n  }\n\n}\n\nexport default GoogleAuth;\n/*\n  https://developers.google.com/identity/sign-in/web/reference\n  clentId - used to identify a single app to Google's OAuth servers.\n  Load client:auth2 libraries and then initialize via callback.\n*/","map":{"version":3,"sources":["/Users/jack/Code-NoSync/sg-react-01/prac-01/21-authentication/streams/client/src/components/GoogleAuth.js"],"names":["React","GoogleAuth","Component","state","isSignedIn","onAuthChange","setState","auth","get","componentDidMount","window","gapi","load","client","init","clientId","scope","then","auth2","getAuthInstance","listen","renderAuthButton","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,UAAN,SAAyBD,KAAK,CAACE,SAA/B,CAAyC;AAAA;AAAA;AAAA,SACvCC,KADuC,GAC/B;AACNC,MAAAA,UAAU,EAAE,IADN,CACY;;AADZ,KAD+B;;AAAA,SA4BvCC,YA5BuC,GA4BxB,MAAM;AACnB,WAAKC,QAAL,CAAc;AAAEF,QAAAA,UAAU,EAAE,KAAKG,IAAL,CAAUH,UAAV,CAAqBI,GAArB;AAAd,OAAd;AACD,KA9BsC;AAAA;;AAKvCC,EAAAA,iBAAiB,GAAG;AAClB;AACAC,IAAAA,MAAM,CAACC,IAAP,CAAYC,IAAZ,CAAiB,cAAjB,EAAiC,MAAM;AACrC;AACA;AACA;AACAF,MAAAA,MAAM,CAACC,IAAP,CAAYE,MAAZ,CACGC,IADH,CACQ;AACJC,QAAAA,QAAQ,EACN,2EAFE;AAGJC,QAAAA,KAAK,EAAE;AAHH,OADR,EAMGC,IANH,CAMQ,MAAM;AACV;AACA,aAAKV,IAAL,GAAYG,MAAM,CAACC,IAAP,CAAYO,KAAZ,CAAkBC,eAAlB,EAAZ;AACA,aAAKb,QAAL,CAAc;AAAEF,UAAAA,UAAU,EAAE,KAAKG,IAAL,CAAUH,UAAV,CAAqBI,GAArB;AAAd,SAAd,EAHU,CAKV;;AACA,aAAKD,IAAL,CAAUH,UAAV,CAAqBgB,MAArB,CAA4B,KAAKf,YAAjC;AACD,OAbH;AAcD,KAlBD;AAmBD;;AAMDgB,EAAAA,gBAAgB,GAAG;AACjB,QAAI,KAAKlB,KAAL,CAAWC,UAAX,KAA0B,IAA9B,EAAoC;AAClC,aAAO,IAAP;AACD,KAFD,MAEO,IAAI,KAAKD,KAAL,CAAWC,UAAf,EAA2B;AAChC,0BACE;AAAQ,QAAA,SAAS,EAAC,sBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAG,QAAA,SAAS,EAAC,aAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,aADF;AAMD,KAPM,MAOA;AACL,0BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAAP;AACD;AACF;;AAEDkB,EAAAA,MAAM,GAAG;AACP,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAM,KAAKD,gBAAL,EAAN,CAAP;AACD;;AAjDsC;;AAoDzC,eAAepB,UAAf;AAEA","sourcesContent":["import React from \"react\";\n\nclass GoogleAuth extends React.Component {\n  state = {\n    isSignedIn: null, // null because we do not know if the user is signed in or not signed in when our application first loads\n  };\n\n  componentDidMount() {\n    // Load additional modules\n    window.gapi.load(\"client:auth2\", () => {\n      // Initializes the GoogleAuth object. If the user has already signed in, the GoogleAuth object restores the user's sign-in state from the previous session.\n      // When you initialize the GoogleAuth object, you configre the objet with your OAuth 2.0 client ID and any additional options you want to specify.\n      // Also returns gapi.auth2.GoogleAuth object.\n      window.gapi.client\n        .init({\n          clientId:\n            \"1029807907749-a8snu3tfvj6tcd1qfmdcu5cv1patb7mb.apps.googleusercontent.com\",\n          scope: \"email\",\n        })\n        .then(() => {\n          // Get a reference to the GoogleAuth object\n          this.auth = window.gapi.auth2.getAuthInstance();\n          this.setState({ isSignedIn: this.auth.isSignedIn.get() });\n\n          // Register listener for changes in sign in state\n          this.auth.isSignedIn.listen(this.onAuthChange);\n        });\n    });\n  }\n\n  onAuthChange = () => {\n    this.setState({ isSignedIn: this.auth.isSignedIn.get() });\n  };\n\n  renderAuthButton() {\n    if (this.state.isSignedIn === null) {\n      return null;\n    } else if (this.state.isSignedIn) {\n      return (\n        <button className=\"ui red google button\">\n          <i className=\"google icon\" />\n          Sign Out\n        </button>\n      );\n    } else {\n      return <div>I am not signed in</div>;\n    }\n  }\n\n  render() {\n    return <div>{this.renderAuthButton()}</div>;\n  }\n}\n\nexport default GoogleAuth;\n\n/*\n  https://developers.google.com/identity/sign-in/web/reference\n  clentId - used to identify a single app to Google's OAuth servers.\n  Load client:auth2 libraries and then initialize via callback.\n*/\n"]},"metadata":{},"sourceType":"module"}